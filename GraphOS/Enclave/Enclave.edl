/* Enclave.edl - Top EDL file. */

enclave {
             
    from "OMAP/OMAP.edl" import *;
    from "sgx_tstdc.edl" import *;

    from "sgx_tkey_exchange.edl" import *;

    include "sgx_key_exchange.h"
    include "sgx_trts.h"

    trusted {
        public sgx_status_t enclave_init_ra(int b_pse,
                                            [out] sgx_ra_context_t *p_context);
        public sgx_status_t enclave_ra_close(sgx_ra_context_t context);
        public sgx_status_t verify_att_result_mac(sgx_ra_context_t context,
                                                  [in,size=message_size] uint8_t* message, 
                                                  size_t message_size, 
                                                  [in,size=mac_size] uint8_t* mac, 
                                                  size_t mac_size);
        public sgx_status_t put_secret_data(sgx_ra_context_t context,  
                                            [in,size=secret_size] uint8_t* p_secret,
                                            uint32_t secret_size,
                                            [in,count=16] uint8_t* gcm_mac);
        public void ecall_PageRank();               
        public void ecall_BFS(int src);               
        public void ecall_oblivious_BFS(int src);               
        public void ecall_non_oblivious_BFS(int src);               
        public void ecall_DFS(int src);               
        public void ecall_oblivm_BFS(int src,[user_check]char** tovisit,[user_check]char** add);               
        public void ecall_oblivm_DFS(int src,[user_check]char** tovisit,[user_check]char** add);               
        public void ecall_single_source_shortest_path(int src);               
        public void ecall_efficient_single_source_shortest_path(int src);               
        public void ecall_oblivm_single_source_shortest_path(int src);               
        public void ecall_oblivious_oblivm_single_source_shortest_path(int src);               
        public void ecall_kruskal_minimum_spanning_tree([user_check]char** edgeList);                                  
        public void ecall_oblivious_kruskal_minimum_spanning_tree([user_check]char** edgeList);                                  
        public void ecall_oblivm_kruskal_minimum_spanning_tree([user_check]char** edgeList);                                  
        public void ecall_add_node([in,string] const char* data,[user_check]char** edgeList);        
        public void ecall_pad_nodes([user_check]char** edgeList);        
        public void ecall_del_node([in,string] const char* data);                
        public void ecall_search_node([in,string] const char* data);
    };
    untrusted { 
        void ocall_print_string([in, string] const char *str);        
        void ocall_start_timer(int timerID);
        double ocall_stop_timer(int timerID);        
    };

};
