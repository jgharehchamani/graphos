enclave {

    from "sgx_tsgxssl.edl" import *;

    trusted {       
        public void ecall_setup_oram(int max_size);		
        public void ecall_read_node([in, count=16] const char *bid,[out,size=16] char* value);
        public void ecall_write_node([in, count=16] const char *bid,[in,size=16]const char* value);
        public void ecall_setup_omap_by_client(int max_size,[in, count=16] const char *bid,long long rootPos,[in,size=128] const char* secretKey);
        public void ecall_setup_omap_with_small_memory(int max_size,long long initialCount,[in,size=128] const char* secretKey);
        public void ecall_setup_with_small_memory(int max_size,long long vSize,[in,size=128] const char* secretKey,[user_check]char** edgeList,int op);
        public double ecall_measure_oram_speed(int testSize);
        public double ecall_measure_omap_speed(int testSize);
        public double ecall_measure_eviction_speed(int testSize);
        public double ecall_measure_oram_setup_speed(int testSize);
        public double ecall_measure_omap_setup_speed(int testSize);
        public void ecall_read_and_set_node([in, count=16] const char *bid,[out,size=16] char* value);
        public void ecall_read_write_node([in, count=16] const char *bid,[in,size=16] const char* value,[out,size=16] char* oldvalue);
        public void ecall_read_and_set_dist_node([in, count=16] const char *bid,[in,size=16]const char* value,[out,size=16] char* newValue);
        public void ecall_start_setup();
        public void ecall_end_setup();

        public void ecall_setup_oheap(int maxSize);
        public void ecall_dummy_heap_op();
        public void ecall_set_new_minheap_node(int newMinHeapNodeV, int newMinHeapNodeDist);
        public void ecall_extract_min_id([in,out,count=1]int* id, [in,out,count=1]int* dist);
        public void ecall_execute_heap_operation([in,out,count=1]int* id, [in,out,count=1]int* dist,int op);
    };
        
    untrusted {        
        void ocall_setup_ramStore(size_t num, int size);
        void ocall_setup_heapStore(size_t num, int size);
        void ocall_finish_setup();
        void ocall_begin_setup();
        size_t ocall_nread_ramStore(size_t blockCount,[in,count=blockCount]long long* indexes, [in,out,count=len] char *blk,size_t len);
        size_t ocall_nread_heapStore(size_t blockCount,[in,count=blockCount]long long* indexes, [in,out,count=len] char *blk,size_t len);
        size_t ocall_nread_prf(size_t blockCount,size_t begin, [in,out,count=len] char *blk,size_t len);
        size_t ocall_nread_rawRamStore(size_t blockCount,size_t begin, [in,out,count=len] char *blk,size_t len);
        size_t ocall_read_rawRamStore(size_t index, [in,out,count=len] char *blk,size_t len);
        size_t ocall_read_prfRamStore(size_t index, [in,out,count=len] char *blk,size_t len);
        void ocall_nwrite_ramStore(size_t blockCount,[in,count=blockCount]long long* indexes, [in, count=len] const char *blk,size_t len);
        void ocall_nwrite_heapStore(size_t blockCount,[in,count=blockCount]long long* indexes, [in, count=len] const char *blk,size_t len);
        void ocall_nwrite_prf(size_t blockCount,[in,count=blockCount]long long* indexes, [in, count=len] const char *blk,size_t len);
        void ocall_nwrite_rawRamStore(size_t blockCount,[in,count=blockCount]long long* indexes, [in, count=len] const char *blk,size_t len);
        void ocall_nwrite_rawRamStore_for_graph(size_t blockCount,[in,count=blockCount]long long* indexes, [in, count=len] const char *blk,size_t len);
        void ocall_write_rawRamStore(long long index, [in, count=len] const char *blk,size_t len);
        void ocall_write_prfRamStore(long long index, [in, count=len] const char *blk,size_t len);
        void ocall_initialize_ramStore(long long begin,long long end, [in, count=len] const char *block,size_t len);
        void ocall_initialize_heapStore(long long begin,long long end, [in, count=len] const char *block,size_t len);
        void ocall_write_ramStore(long long pos, [in, count=len] const char *block,size_t len);
        void ocall_write_heapStore(long long pos, [in, count=len] const char *block,size_t len);
    };
};
